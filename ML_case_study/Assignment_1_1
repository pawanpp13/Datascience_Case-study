//KNN Algorithm implementation in Python

from sklearn import preprocessing
import pandas as pd
from sklearn import tree
from scipy.spatial import distance
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
        
        
def Marvellous():
    
    data=pd.read_csv("MarvellousInfosystems_PlayPredictor.csv")
     # Converting string labels into numbers.
    le = preprocessing.LabelEncoder()
    # Encode labels in column 'wether','temperature'. 
    data['Wether']= le.fit_transform(data['Wether']) 
    data['Temperature']=le.fit_transform(data['Temperature'])
    #drop unwanted column
    data.drop(data.filter(regex="Unnamed"),axis=1, inplace=True)
    print(data.head())
    
    X = data.iloc[:, :-1].values
    y = data.iloc[:, 2].values
    
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.5)
    
    cobj=KNeighborsClassifier(n_neighbors=3,metric='euclidean') #n_neighborse=k=3
    
    cobj.fit(X_train,y_train)
    
    prediction=cobj.predict(X_test)
    
    Accuracy=accuracy_score(y_test,prediction) #0=overcast,1=rainy2=sunny,1=hot,
    return Accuracy
        
def main():     
    accuracy=Marvellous()
    print("accuracy of the knn is :",accuracy*100,"%")


if __name__=="__main__":
    main()




